!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALGraph	type.h	/^} ALGraph;               \/\/图类型$/;"	t	typeref:struct:__anon1
AdjList	type.h	/^typedef VertexNode AdjList[MaxVertexNum];       \/\/AdjList是邻接表类型$/;"	t
Algorithm_start	gtk.c	/^void Algorithm_start(GtkWidget *widget,gpointer data){$/;"	f
Algwindow	gtk.c	/^GtkWidget 	*mainwindow,*Algwindow;$/;"	v
Allwindow	allAlg.c	/^GtkWidget	*Allwindow;$/;"	v
BFS	mytu.c	/^int  BFS(ALGraph *G,char value){$/;"	f
BestSearch	mytu.c	/^int  BestSearch(ALGraph *G,char value){$/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g$/;"	m
Close	mytu.c	/^EdgeNode*  Close[MaxVertexNum];\/\/close表，next指向父节点，下标表示编号$/;"	v
CostSearch	mytu.c	/^int  CostSearch(ALGraph *G,char value){$/;"	f
CreatALGraph	mytu.c	/^void CreatALGraph(ALGraph *G,char fileName[])$/;"	f
DEEPLIMIT	mytu.c	12;"	d	file:
DFS	mytu.c	/^int DFS(ALGraph *G,char value){$/;"	f
ERROR	mytu.c	9;"	d	file:
EdgeNode	type.h	/^}EdgeNode;$/;"	t	typeref:struct:node
EnQueue	mytu.c	/^int EnQueue(TYPE *open,int *in,int *out,TYPE value){$/;"	f
FAILURE	mytu.c	8;"	d	file:
FALSE	mytu.c	11;"	d	file:
FallFile	allAlg.c	/^GtkWidget	*FallFile;$/;"	v
Ffile	gtk.c	/^GtkWidget 	*Ffile;$/;"	v
GetQueue	mytu.c	/^int GetQueue(TYPE *open,int *in,int *out,TYPE *value){$/;"	f
IterDFS	mytu.c	/^int IterDFS(ALGraph *G,char value){$/;"	f
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LimitDFS	mytu.c	/^int LimitDFS(ALGraph *G,char value){$/;"	f
MaxVertexNum	mytu.c	6;"	d	file:
MaxVertexNum	type.h	2;"	d
OrderEnQueue	mytu.c	/^int OrderEnQueue(TYPE *open,int *in,int *out,TYPE value,int mode){$/;"	f
Pop	mytu.c	/^int Pop(TYPE *open,int *out,TYPE *value){$/;"	f
Push	mytu.c	/^int Push(TYPE *open,int *in,TYPE value){$/;"	f
SRC	Makefile	/^SRC = $(wildcard *.c)$/;"	m
SUCCESS	mytu.c	7;"	d	file:
TARGET	Makefile	/^TARGET = web_server$/;"	m
TRUE	mytu.c	10;"	d	file:
TYPE	mytu.c	/^typedef EdgeNode*  TYPE;$/;"	t	file:
TallClose	allAlg.c	/^GtkWidget	*TallOpen[6],*TallClose[6],*TallFind[6];	$/;"	v
TallEnd	allAlg.c	/^GtkWidget 	*TallStart,*TallEnd; $/;"	v
TallFind	allAlg.c	/^GtkWidget	*TallOpen[6],*TallClose[6],*TallFind[6];	$/;"	v
TallOpen	allAlg.c	/^GtkWidget	*TallOpen[6],*TallClose[6],*TallFind[6];	$/;"	v
TallStart	allAlg.c	/^GtkWidget 	*TallStart,*TallEnd; $/;"	v
Tend	gtk.c	/^GtkWidget 	*Tstart,*Tend; $/;"	v
Textview_clear	gtk.c	/^void Textview_clear(){$/;"	f
Tstart	gtk.c	/^GtkWidget 	*Tstart,*Tend; $/;"	v
VertexNode	type.h	/^}VertexNode;$/;"	t	typeref:struct:vnode
Visit	mytu.c	/^int Visit[MaxVertexNum] = {FALSE};$/;"	v
addClose_style	gtk.c	/^GtkTextTag 	*addOpen_style,*addClose_style;$/;"	v
addOpen_style	gtk.c	/^GtkTextTag 	*addOpen_style,*addClose_style;$/;"	v
adjlist	type.h	/^	AdjList adjlist;     \/\/邻接表$/;"	m	struct:__anon1
adjvex	type.h	/^	char adjvex;          	\/\/邻接点域$/;"	m	struct:node
all_start	allAlg.c	/^void all_start(){$/;"	f
back_main	allAlg.c	/^void back_main(GtkWidget *widget,gpointer data){$/;"	f
back_parent	gtk.c	/^void back_parent(GtkWidget *widget,gpointer data){$/;"	f
bufclose	gtk.c	/^GtkTextBuffer	*bufopen,*bufclose;$/;"	v
bufcloseNum	gtk.c	/^GtkTextBuffer	*buffind,*bufopenNum,*bufcloseNum;$/;"	v
buffind	gtk.c	/^GtkTextBuffer	*buffind,*bufopenNum,*bufcloseNum;$/;"	v
bufopen	gtk.c	/^GtkTextBuffer	*bufopen,*bufclose;$/;"	v
bufopenNum	gtk.c	/^GtkTextBuffer	*buffind,*bufopenNum,*bufcloseNum;$/;"	v
clicked_Algorithm	gtk.c	/^void clicked_Algorithm(GtkWidget *widget,gpointer data)$/;"	f
clicked_All	allAlg.c	/^void clicked_All(GtkWidget *widget,gpointer data){$/;"	f
cost	type.h	/^	int cost;		\/\/代价$/;"	m	struct:node
deep	type.h	/^	int deep;		\/\/节点深度$/;"	m	struct:node
e	type.h	/^	int n,e;             \/\/图中当前顶点数和边数$/;"	m	struct:__anon1
evaluate	type.h	/^	int evaluate;		\/\/估价$/;"	m	struct:node
exit	gtk.c	/^void exit(GtkWidget *widget,gpointer data){$/;"	f
father	type.h	/^	struct node *next,*father;    \/\/链域$/;"	m	struct:node	typeref:struct:node::
firstedge	type.h	/^	EdgeNode *firstedge; \/\/边表头指针$/;"	m	struct:vnode
main	gtk.c	/^int main (int argc, char *argv[])$/;"	f
mainwindow	gtk.c	/^GtkWidget 	*mainwindow,*Algwindow;$/;"	v
n	type.h	/^	int n,e;             \/\/图中当前顶点数和边数$/;"	m	struct:__anon1
next	type.h	/^	struct node *next,*father;    \/\/链域$/;"	m	struct:node	typeref:struct:node::node
node	type.h	/^typedef struct node{       	\/\/边表结点$/;"	s
objs	Makefile	/^objs = $(patsubst %.c,%.o,$(SRC))$/;"	m
open	mytu.c	/^EdgeNode*  open[MaxVertexNum]; \/\/open表，next指向父节点$/;"	v
show	mytu.c	/^void show(ALGraph *G){$/;"	f
showClose	gtk.c	/^void showClose(EdgeNode* *open,ALGraph *G,int in){$/;"	f
showOpenaQueue	gtk.c	/^void showOpenaQueue(EdgeNode* *open,ALGraph *G,int in,int out){$/;"	f
showOpenaStack	gtk.c	/^void showOpenaStack(EdgeNode* *open,ALGraph *G,int in){$/;"	f
showResult	gtk.c	/^void showResult(int findFlag,int openNum,int closeNum){$/;"	f
vertex	type.h	/^	char vertex;           \/\/顶点域$/;"	m	struct:vnode
vnode	type.h	/^typedef struct vnode{     \/\/顶点表结点$/;"	s
